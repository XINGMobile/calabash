require 'luffa'

desc 'Run Scenarios with :host strategy'
task :host do
  sh "CAL_UIA_STRATEGY=host bundle exec cucumber"
end

desc 'Run Scenarios with :shared_element strategy'
task :shared_element do
  sh "CAL_UIA_STRATEGY=shared_element bundle exec cucumber"
end

desc 'Run Scenarios with :preferences strategy'
task :preferences do
  sh "CAL_UIA_STRATEGY=shared_element bundle exec cucumber"
end

desc 'Run Scenarios with all strategies'
task :strategies do
  [:host, :shared_element, :preferences].each do |task|
    Rake::Task[task].invoke
  end
end

module IOS
  class App
    attr :name, :repo, :source_dir, :make_dir, :rule, :product_dir

    def initialize(name, repo, source_dir, make_dir, rule, product_dir)
      @name = name
      @repo = repo
      @source_dir = source_dir
      @make_dir = make_dir
      @rule = rule
      @product_dir = product_dir
    end

    def git_clone
      cmd = "git clone --recursive --depth 1 #{repo} #{source_dir}"
      Luffa.log_info("Cloning #{repo}")
      Luffa.unix_command(cmd,
                         {:fail_msg => "Could not clone #{repo}",
                          :pass_msg => "Cloned #{repo}"})
    end

    def make(install_dir)
      Dir.chdir(source_dir) do
        Luffa.unix_command('git checkout master')
        Luffa.unix_command('git pull origin master')
        Dir.chdir(make_dir) do
          Luffa.unix_command("make #{rule}",
                             {:fail_msg => "Could not 'make #{rule}'",
                              :pass_msg => "Made rule '#{rule}'"} )
          Luffa.unix_command("mv #{File.join(product_dir, name)} #{install_dir}",
                             {:fail_msg => "Could not install '#{name}'",
                              :pass_msg => "Installed '#{name}'"})
        end
      end

      Luffa.log_info("Installed: #{File.join(install_dir, name)}")
    end

    def build(install_dir)
      unless File.exist?(source_dir)
        git_clone
      end

      make(install_dir)
    end
  end
end

APPS = [
  IOS::App.new('CalSmoke-cal.app',
               'git@github.com:calabash/ios-smoke-test-app.git',
               'binaries/smoke-test-app',
               'CalSmokeApp',
               'app-cal',
               "./Products/app/CalSmoke-cal"),

  IOS::App.new('iPhoneOnly.app',
               'git@github.com:calabash/ios-iphone-only-app.git',
               'binaries/iphone-only-app',
               './',
               'app',
               'Calabash-app')
]

IPAS = [
  IOS::App.new('CalSmoke-cal.ipa',
               'git@github.com:calabash/ios-smoke-test-app.git',
               'binaries/smoke-test-app',
               'CalSmokeApp',
               'ipa-cal',
               "./Products/ipa/CalSmoke-cal"),

  IOS::App.new('iPhoneOnly.ipa',
               'git@github.com:calabash/ios-iphone-only-app.git',
               'binaries/iphone-only-app',
               './',
               'ipa',
               'Calabash-ipa')
]

desc 'Uninstall test binaries'
task :clean do
  sh 'mkdir -p ./binaries'
  sh 'rm -rf ./binaries/*.app'
  sh 'rm -rf ./binaries/*.ipa'
end

desc 'Install the .apps for Cucumber testing.'
task :install_apps do

  install_dir = File.join(File.dirname(__FILE__), 'binaries')

  APPS.each do |app|

    app_path = File.join(install_dir, app.name)

    if File.exist?(app_path)
      Luffa.log_info("App exists at #{app_path}")
      Luffa.log_info('Done')
    else
      Luffa.log_info("App does not exist at #{app_path}")
      Luffa.log_info("Will install from sources.")

      app.build(install_dir)
    end
  end
end

# If you have multiple Developer accounts, you might
# need to set the CODE_SIGN_IDENTITY variable.
#
# $ CODE_SIGN_IDENTITY="iPhone Developer: Joshua Moody (8QXXXXX9F)" rake ensure_ipa
desc 'Install the .ipas for Cucumber testing.'
task :install_ipas do
  install_dir = File.join(File.dirname(__FILE__), 'binaries')

  IPAS.each do |app|

    app_path = File.join(install_dir, app.name)

    if File.exist?(app_path)
      Luffa.log_info("App exists at #{app_path}")
      Luffa.log_info('Done')
    else
      Luffa.log_info("App does not exist at #{app_path}")
      Luffa.log_info("Will install from sources.")

      app.build(install_dir)
    end
  end
end

